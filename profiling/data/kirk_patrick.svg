<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1061.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="30"><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 3.33%)</title><rect x="0.0000%" y="853" width="3.3333%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="863.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="0.0000%" y="837" width="3.3333%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="847.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="0.0000%" y="821" width="3.3333%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="831.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="0.0000%" y="805" width="3.3333%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="815.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.33%)</title><rect x="0.0000%" y="789" width="3.3333%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 3.33%)</title><rect x="0.0000%" y="773" width="3.3333%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="783.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 3.33%)</title><rect x="0.0000%" y="757" width="3.3333%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="767.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 3.33%)</title><rect x="0.0000%" y="741" width="3.3333%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 3.33%)</title><rect x="0.0000%" y="725" width="3.3333%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50">cor..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 3.33%)</title><rect x="0.0000%" y="709" width="3.3333%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50">cor..</text></g><g><title>kirk_seidel::main::_{{closure}} (1 samples, 3.33%)</title><rect x="0.0000%" y="693" width="3.3333%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50">kir..</text></g><g><title>rand::rng::Rng::gen (1 samples, 3.33%)</title><rect x="0.0000%" y="677" width="3.3333%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50">ran..</text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 3.33%)</title><rect x="0.0000%" y="661" width="3.3333%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50">ran..</text></g><g><title>rand::rng::Rng::gen (1 samples, 3.33%)</title><rect x="0.0000%" y="645" width="3.3333%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50">ran..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (1 samples, 3.33%)</title><rect x="0.0000%" y="629" width="3.3333%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50">ran..</text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (1 samples, 3.33%)</title><rect x="0.0000%" y="613" width="3.3333%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50">&lt;ra..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 3.33%)</title><rect x="0.0000%" y="597" width="3.3333%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50">&lt;ra..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (1 samples, 3.33%)</title><rect x="0.0000%" y="581" width="3.3333%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50">&lt;ra..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1 samples, 3.33%)</title><rect x="0.0000%" y="565" width="3.3333%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50">ran..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1 samples, 3.33%)</title><rect x="0.0000%" y="549" width="3.3333%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50">&lt;ra..</text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1 samples, 3.33%)</title><rect x="0.0000%" y="533" width="3.3333%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50">&lt;ra..</text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1 samples, 3.33%)</title><rect x="0.0000%" y="517" width="3.3333%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50">ran..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1 samples, 3.33%)</title><rect x="0.0000%" y="501" width="3.3333%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50">ran..</text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1 samples, 3.33%)</title><rect x="0.0000%" y="485" width="3.3333%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50">ran..</text></g><g><title>rand_chacha::guts::refill_wide_impl (1 samples, 3.33%)</title><rect x="0.0000%" y="469" width="3.3333%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50">ran..</text></g><g><title>rand_chacha::guts::round (1 samples, 3.33%)</title><rect x="0.0000%" y="453" width="3.3333%" height="15" fill="rgb(249,31,29)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50">ran..</text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 3.33%)</title><rect x="0.0000%" y="437" width="3.3333%" height="15" fill="rgb(225,111,53)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50">&lt;pp..</text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 3.33%)</title><rect x="0.0000%" y="421" width="3.3333%" height="15" fill="rgb(238,160,17)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50">&lt;pp..</text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (1 samples, 3.33%)</title><rect x="0.0000%" y="405" width="3.3333%" height="15" fill="rgb(214,148,48)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50">&lt;pp..</text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (1 samples, 3.33%)</title><rect x="0.0000%" y="389" width="3.3333%" height="15" fill="rgb(232,36,49)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 3.33%)</title><rect x="3.3333%" y="789" width="3.3333%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="3.5833%" y="799.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="3.3333%" y="773" width="3.3333%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="1"/><text x="3.5833%" y="783.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="3.3333%" y="757" width="3.3333%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="3.5833%" y="767.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="3.3333%" y="741" width="3.3333%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="1"/><text x="3.5833%" y="751.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.33%)</title><rect x="3.3333%" y="725" width="3.3333%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="1"/><text x="3.5833%" y="735.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 3.33%)</title><rect x="3.3333%" y="709" width="3.3333%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="1"/><text x="3.5833%" y="719.50">all..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="3.3333%" y="693" width="3.3333%" height="15" fill="rgb(226,3,54)" fg:x="1" fg:w="1"/><text x="3.5833%" y="703.50">&lt;co..</text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (1 samples, 3.33%)</title><rect x="3.3333%" y="677" width="3.3333%" height="15" fill="rgb(245,192,40)" fg:x="1" fg:w="1"/><text x="3.5833%" y="687.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 3.33%)</title><rect x="6.6667%" y="757" width="3.3333%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1"/><text x="6.9167%" y="767.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 3.33%)</title><rect x="13.3333%" y="741" width="3.3333%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="13.5833%" y="751.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="13.3333%" y="725" width="3.3333%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1"/><text x="13.5833%" y="735.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="13.3333%" y="709" width="3.3333%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1"/><text x="13.5833%" y="719.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="13.3333%" y="693" width="3.3333%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="1"/><text x="13.5833%" y="703.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.33%)</title><rect x="13.3333%" y="677" width="3.3333%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="1"/><text x="13.5833%" y="687.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 3.33%)</title><rect x="13.3333%" y="661" width="3.3333%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1"/><text x="13.5833%" y="671.50">all..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="13.3333%" y="645" width="3.3333%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1"/><text x="13.5833%" y="655.50">&lt;co..</text></g><g><title>&lt;std::collections::hash::set::IntoIter&lt;K&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="13.3333%" y="629" width="3.3333%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1"/><text x="13.5833%" y="639.50">&lt;st..</text></g><g><title>&lt;hashbrown::set::IntoIter&lt;K,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="13.3333%" y="613" width="3.3333%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1"/><text x="13.5833%" y="623.50">&lt;ha..</text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="13.3333%" y="597" width="3.3333%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="1"/><text x="13.5833%" y="607.50">&lt;ha..</text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="13.3333%" y="581" width="3.3333%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="1"/><text x="13.5833%" y="591.50">&lt;ha..</text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="13.3333%" y="565" width="3.3333%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1"/><text x="13.5833%" y="575.50">&lt;ha..</text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 3.33%)</title><rect x="13.3333%" y="549" width="3.3333%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1"/><text x="13.5833%" y="559.50">has..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="13.3333%" y="533" width="3.3333%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1"/><text x="13.5833%" y="543.50">&lt;ha..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 3.33%)</title><rect x="13.3333%" y="517" width="3.3333%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1"/><text x="13.5833%" y="527.50">has..</text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (1 samples, 3.33%)</title><rect x="13.3333%" y="501" width="3.3333%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="1"/><text x="13.5833%" y="511.50">has..</text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1 samples, 3.33%)</title><rect x="13.3333%" y="485" width="3.3333%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="13.5833%" y="495.50">cor..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 3.33%)</title><rect x="16.6667%" y="693" width="3.3333%" height="15" fill="rgb(217,147,25)" fg:x="5" fg:w="1"/><text x="16.9167%" y="703.50">&lt;al..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="20.0000%" y="661" width="3.3333%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="20.2500%" y="671.50">kir..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="20.0000%" y="645" width="3.3333%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="20.2500%" y="655.50">kir..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="20.0000%" y="629" width="3.3333%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="20.2500%" y="639.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="20.0000%" y="613" width="3.3333%" height="15" fill="rgb(248,47,43)" fg:x="6" fg:w="1"/><text x="20.2500%" y="623.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="20.0000%" y="597" width="3.3333%" height="15" fill="rgb(221,10,30)" fg:x="6" fg:w="1"/><text x="20.2500%" y="607.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="20.0000%" y="581" width="3.3333%" height="15" fill="rgb(210,229,1)" fg:x="6" fg:w="1"/><text x="20.2500%" y="591.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="20.0000%" y="565" width="3.3333%" height="15" fill="rgb(222,148,37)" fg:x="6" fg:w="1"/><text x="20.2500%" y="575.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="20.0000%" y="549" width="3.3333%" height="15" fill="rgb(234,67,33)" fg:x="6" fg:w="1"/><text x="20.2500%" y="559.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="20.0000%" y="533" width="3.3333%" height="15" fill="rgb(247,98,35)" fg:x="6" fg:w="1"/><text x="20.2500%" y="543.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="20.0000%" y="517" width="3.3333%" height="15" fill="rgb(247,138,52)" fg:x="6" fg:w="1"/><text x="20.2500%" y="527.50">has..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 3.33%)</title><rect x="20.0000%" y="501" width="3.3333%" height="15" fill="rgb(213,79,30)" fg:x="6" fg:w="1"/><text x="20.2500%" y="511.50">cor..</text></g><g><title>asm_exc_page_fault (1 samples, 3.33%)</title><rect x="20.0000%" y="485" width="3.3333%" height="15" fill="rgb(246,177,23)" fg:x="6" fg:w="1"/><text x="20.2500%" y="495.50">asm..</text></g><g><title>exc_page_fault (1 samples, 3.33%)</title><rect x="20.0000%" y="469" width="3.3333%" height="15" fill="rgb(230,62,27)" fg:x="6" fg:w="1"/><text x="20.2500%" y="479.50">exc..</text></g><g><title>do_user_addr_fault (1 samples, 3.33%)</title><rect x="20.0000%" y="453" width="3.3333%" height="15" fill="rgb(216,154,8)" fg:x="6" fg:w="1"/><text x="20.2500%" y="463.50">do_..</text></g><g><title>handle_mm_fault (1 samples, 3.33%)</title><rect x="20.0000%" y="437" width="3.3333%" height="15" fill="rgb(244,35,45)" fg:x="6" fg:w="1"/><text x="20.2500%" y="447.50">han..</text></g><g><title>__handle_mm_fault (1 samples, 3.33%)</title><rect x="20.0000%" y="421" width="3.3333%" height="15" fill="rgb(251,115,12)" fg:x="6" fg:w="1"/><text x="20.2500%" y="431.50">__h..</text></g><g><title>handle_pte_fault (1 samples, 3.33%)</title><rect x="20.0000%" y="405" width="3.3333%" height="15" fill="rgb(240,54,50)" fg:x="6" fg:w="1"/><text x="20.2500%" y="415.50">han..</text></g><g><title>do_anonymous_page (1 samples, 3.33%)</title><rect x="20.0000%" y="389" width="3.3333%" height="15" fill="rgb(233,84,52)" fg:x="6" fg:w="1"/><text x="20.2500%" y="399.50">do_..</text></g><g><title>__mem_cgroup_charge (1 samples, 3.33%)</title><rect x="20.0000%" y="373" width="3.3333%" height="15" fill="rgb(207,117,47)" fg:x="6" fg:w="1"/><text x="20.2500%" y="383.50">__m..</text></g><g><title>get_mem_cgroup_from_mm (1 samples, 3.33%)</title><rect x="20.0000%" y="357" width="3.3333%" height="15" fill="rgb(249,43,39)" fg:x="6" fg:w="1"/><text x="20.2500%" y="367.50">get..</text></g><g><title>kirk_seidel::bridge (3 samples, 10.00%)</title><rect x="16.6667%" y="709" width="10.0000%" height="15" fill="rgb(209,38,44)" fg:x="5" fg:w="3"/><text x="16.9167%" y="719.50">kirk_seidel::b..</text></g><g><title>kirk_seidel::bridge (2 samples, 6.67%)</title><rect x="20.0000%" y="693" width="6.6667%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="2"/><text x="20.2500%" y="703.50">kirk_seid..</text></g><g><title>kirk_seidel::bridge (2 samples, 6.67%)</title><rect x="20.0000%" y="677" width="6.6667%" height="15" fill="rgb(242,79,21)" fg:x="6" fg:w="2"/><text x="20.2500%" y="687.50">kirk_seid..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="23.3333%" y="661" width="3.3333%" height="15" fill="rgb(211,96,35)" fg:x="7" fg:w="1"/><text x="23.5833%" y="671.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="23.3333%" y="645" width="3.3333%" height="15" fill="rgb(253,215,40)" fg:x="7" fg:w="1"/><text x="23.5833%" y="655.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="23.3333%" y="629" width="3.3333%" height="15" fill="rgb(211,81,21)" fg:x="7" fg:w="1"/><text x="23.5833%" y="639.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="23.3333%" y="613" width="3.3333%" height="15" fill="rgb(208,190,38)" fg:x="7" fg:w="1"/><text x="23.5833%" y="623.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="23.3333%" y="597" width="3.3333%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="1"/><text x="23.5833%" y="607.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="23.3333%" y="581" width="3.3333%" height="15" fill="rgb(237,122,38)" fg:x="7" fg:w="1"/><text x="23.5833%" y="591.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="23.3333%" y="565" width="3.3333%" height="15" fill="rgb(244,218,35)" fg:x="7" fg:w="1"/><text x="23.5833%" y="575.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="23.3333%" y="549" width="3.3333%" height="15" fill="rgb(240,68,47)" fg:x="7" fg:w="1"/><text x="23.5833%" y="559.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 3.33%)</title><rect x="23.3333%" y="533" width="3.3333%" height="15" fill="rgb(210,16,53)" fg:x="7" fg:w="1"/><text x="23.5833%" y="543.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 3.33%)</title><rect x="23.3333%" y="517" width="3.3333%" height="15" fill="rgb(235,124,12)" fg:x="7" fg:w="1"/><text x="23.5833%" y="527.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 3.33%)</title><rect x="23.3333%" y="501" width="3.3333%" height="15" fill="rgb(224,169,11)" fg:x="7" fg:w="1"/><text x="23.5833%" y="511.50">has..</text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 3.33%)</title><rect x="23.3333%" y="485" width="3.3333%" height="15" fill="rgb(250,166,2)" fg:x="7" fg:w="1"/><text x="23.5833%" y="495.50">has..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 3.33%)</title><rect x="23.3333%" y="469" width="3.3333%" height="15" fill="rgb(242,216,29)" fg:x="7" fg:w="1"/><text x="23.5833%" y="479.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 3.33%)</title><rect x="23.3333%" y="453" width="3.3333%" height="15" fill="rgb(230,116,27)" fg:x="7" fg:w="1"/><text x="23.5833%" y="463.50">all..</text></g><g><title>alloc::alloc::alloc (1 samples, 3.33%)</title><rect x="23.3333%" y="437" width="3.3333%" height="15" fill="rgb(228,99,48)" fg:x="7" fg:w="1"/><text x="23.5833%" y="447.50">all..</text></g><g><title>__rust_alloc (1 samples, 3.33%)</title><rect x="23.3333%" y="421" width="3.3333%" height="15" fill="rgb(253,11,6)" fg:x="7" fg:w="1"/><text x="23.5833%" y="431.50">__r..</text></g><g><title>&lt;tikv_jemallocator::Jemalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1 samples, 3.33%)</title><rect x="23.3333%" y="405" width="3.3333%" height="15" fill="rgb(247,143,39)" fg:x="7" fg:w="1"/><text x="23.5833%" y="415.50">&lt;ti..</text></g><g><title>_rjem_je_malloc_default (1 samples, 3.33%)</title><rect x="23.3333%" y="389" width="3.3333%" height="15" fill="rgb(236,97,10)" fg:x="7" fg:w="1"/><text x="23.5833%" y="399.50">_rj..</text></g><g><title>imalloc (1 samples, 3.33%)</title><rect x="23.3333%" y="373" width="3.3333%" height="15" fill="rgb(233,208,19)" fg:x="7" fg:w="1"/><text x="23.5833%" y="383.50">ima..</text></g><g><title>imalloc_body (1 samples, 3.33%)</title><rect x="23.3333%" y="357" width="3.3333%" height="15" fill="rgb(216,164,2)" fg:x="7" fg:w="1"/><text x="23.5833%" y="367.50">ima..</text></g><g><title>imalloc_no_sample (1 samples, 3.33%)</title><rect x="23.3333%" y="341" width="3.3333%" height="15" fill="rgb(220,129,5)" fg:x="7" fg:w="1"/><text x="23.5833%" y="351.50">ima..</text></g><g><title>iallocztm (1 samples, 3.33%)</title><rect x="23.3333%" y="325" width="3.3333%" height="15" fill="rgb(242,17,10)" fg:x="7" fg:w="1"/><text x="23.5833%" y="335.50">ial..</text></g><g><title>arena_malloc (1 samples, 3.33%)</title><rect x="23.3333%" y="309" width="3.3333%" height="15" fill="rgb(242,107,0)" fg:x="7" fg:w="1"/><text x="23.5833%" y="319.50">are..</text></g><g><title>_rjem_je_large_palloc (1 samples, 3.33%)</title><rect x="23.3333%" y="293" width="3.3333%" height="15" fill="rgb(251,28,31)" fg:x="7" fg:w="1"/><text x="23.5833%" y="303.50">_rj..</text></g><g><title>_rjem_je_arena_extent_alloc_large (1 samples, 3.33%)</title><rect x="23.3333%" y="277" width="3.3333%" height="15" fill="rgb(233,223,10)" fg:x="7" fg:w="1"/><text x="23.5833%" y="287.50">_rj..</text></g><g><title>_rjem_je_pa_alloc (1 samples, 3.33%)</title><rect x="23.3333%" y="261" width="3.3333%" height="15" fill="rgb(215,21,27)" fg:x="7" fg:w="1"/><text x="23.5833%" y="271.50">_rj..</text></g><g><title>pai_alloc (1 samples, 3.33%)</title><rect x="23.3333%" y="245" width="3.3333%" height="15" fill="rgb(232,23,21)" fg:x="7" fg:w="1"/><text x="23.5833%" y="255.50">pai..</text></g><g><title>pac_alloc_impl (1 samples, 3.33%)</title><rect x="23.3333%" y="229" width="3.3333%" height="15" fill="rgb(244,5,23)" fg:x="7" fg:w="1"/><text x="23.5833%" y="239.50">pac..</text></g><g><title>pac_alloc_real (1 samples, 3.33%)</title><rect x="23.3333%" y="213" width="3.3333%" height="15" fill="rgb(226,81,46)" fg:x="7" fg:w="1"/><text x="23.5833%" y="223.50">pac..</text></g><g><title>_rjem_je_ecache_alloc (1 samples, 3.33%)</title><rect x="23.3333%" y="197" width="3.3333%" height="15" fill="rgb(247,70,30)" fg:x="7" fg:w="1"/><text x="23.5833%" y="207.50">_rj..</text></g><g><title>extent_recycle (1 samples, 3.33%)</title><rect x="23.3333%" y="181" width="3.3333%" height="15" fill="rgb(212,68,19)" fg:x="7" fg:w="1"/><text x="23.5833%" y="191.50">ext..</text></g><g><title>extent_recycle_split (1 samples, 3.33%)</title><rect x="23.3333%" y="165" width="3.3333%" height="15" fill="rgb(240,187,13)" fg:x="7" fg:w="1"/><text x="23.5833%" y="175.50">ext..</text></g><g><title>extent_deactivate_locked (1 samples, 3.33%)</title><rect x="23.3333%" y="149" width="3.3333%" height="15" fill="rgb(223,113,26)" fg:x="7" fg:w="1"/><text x="23.5833%" y="159.50">ext..</text></g><g><title>extent_deactivate_locked_impl (1 samples, 3.33%)</title><rect x="23.3333%" y="133" width="3.3333%" height="15" fill="rgb(206,192,2)" fg:x="7" fg:w="1"/><text x="23.5833%" y="143.50">ext..</text></g><g><title>_rjem_je_eset_insert (1 samples, 3.33%)</title><rect x="23.3333%" y="117" width="3.3333%" height="15" fill="rgb(241,108,4)" fg:x="7" fg:w="1"/><text x="23.5833%" y="127.50">_rj..</text></g><g><title>_rjem_je_edata_heap_insert (1 samples, 3.33%)</title><rect x="23.3333%" y="101" width="3.3333%" height="15" fill="rgb(247,173,49)" fg:x="7" fg:w="1"/><text x="23.5833%" y="111.50">_rj..</text></g><g><title>ph_insert (1 samples, 3.33%)</title><rect x="23.3333%" y="85" width="3.3333%" height="15" fill="rgb(224,114,35)" fg:x="7" fg:w="1"/><text x="23.5833%" y="95.50">ph_..</text></g><g><title>edata_heap_ph_cmp (1 samples, 3.33%)</title><rect x="23.3333%" y="69" width="3.3333%" height="15" fill="rgb(245,159,27)" fg:x="7" fg:w="1"/><text x="23.5833%" y="79.50">eda..</text></g><g><title>edata_snad_comp (1 samples, 3.33%)</title><rect x="23.3333%" y="53" width="3.3333%" height="15" fill="rgb(245,172,44)" fg:x="7" fg:w="1"/><text x="23.5833%" y="63.50">eda..</text></g><g><title>edata_cmp_summary_comp (1 samples, 3.33%)</title><rect x="23.3333%" y="37" width="3.3333%" height="15" fill="rgb(236,23,11)" fg:x="7" fg:w="1"/><text x="23.5833%" y="47.50">eda..</text></g><g><title>kirk_seidel::bridge (4 samples, 13.33%)</title><rect x="16.6667%" y="741" width="13.3333%" height="15" fill="rgb(205,117,38)" fg:x="5" fg:w="4"/><text x="16.9167%" y="751.50">kirk_seidel::bridge</text></g><g><title>kirk_seidel::bridge (4 samples, 13.33%)</title><rect x="16.6667%" y="725" width="13.3333%" height="15" fill="rgb(237,72,25)" fg:x="5" fg:w="4"/><text x="16.9167%" y="735.50">kirk_seidel::bridge</text></g><g><title>kirk_seidel::median_of_medians (1 samples, 3.33%)</title><rect x="26.6667%" y="709" width="3.3333%" height="15" fill="rgb(244,70,9)" fg:x="8" fg:w="1"/><text x="26.9167%" y="719.50">kir..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 3.33%)</title><rect x="26.6667%" y="693" width="3.3333%" height="15" fill="rgb(217,125,39)" fg:x="8" fg:w="1"/><text x="26.9167%" y="703.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="26.6667%" y="677" width="3.3333%" height="15" fill="rgb(235,36,10)" fg:x="8" fg:w="1"/><text x="26.9167%" y="687.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="26.6667%" y="661" width="3.3333%" height="15" fill="rgb(251,123,47)" fg:x="8" fg:w="1"/><text x="26.9167%" y="671.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="26.6667%" y="645" width="3.3333%" height="15" fill="rgb(221,13,13)" fg:x="8" fg:w="1"/><text x="26.9167%" y="655.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.33%)</title><rect x="26.6667%" y="629" width="3.3333%" height="15" fill="rgb(238,131,9)" fg:x="8" fg:w="1"/><text x="26.9167%" y="639.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 3.33%)</title><rect x="26.6667%" y="613" width="3.3333%" height="15" fill="rgb(211,50,8)" fg:x="8" fg:w="1"/><text x="26.9167%" y="623.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 3.33%)</title><rect x="26.6667%" y="597" width="3.3333%" height="15" fill="rgb(245,182,24)" fg:x="8" fg:w="1"/><text x="26.9167%" y="607.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 3.33%)</title><rect x="26.6667%" y="581" width="3.3333%" height="15" fill="rgb(242,14,37)" fg:x="8" fg:w="1"/><text x="26.9167%" y="591.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 3.33%)</title><rect x="26.6667%" y="565" width="3.3333%" height="15" fill="rgb(246,228,12)" fg:x="8" fg:w="1"/><text x="26.9167%" y="575.50">cor..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 3.33%)</title><rect x="26.6667%" y="549" width="3.3333%" height="15" fill="rgb(213,55,15)" fg:x="8" fg:w="1"/><text x="26.9167%" y="559.50">cor..</text></g><g><title>kirk_seidel::median_of_medians::_{{closure}} (1 samples, 3.33%)</title><rect x="26.6667%" y="533" width="3.3333%" height="15" fill="rgb(209,9,3)" fg:x="8" fg:w="1"/><text x="26.9167%" y="543.50">kir..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by (1 samples, 3.33%)</title><rect x="26.6667%" y="517" width="3.3333%" height="15" fill="rgb(230,59,30)" fg:x="8" fg:w="1"/><text x="26.9167%" y="527.50">cor..</text></g><g><title>core::slice::sort::quicksort (1 samples, 3.33%)</title><rect x="26.6667%" y="501" width="3.3333%" height="15" fill="rgb(209,121,21)" fg:x="8" fg:w="1"/><text x="26.9167%" y="511.50">cor..</text></g><g><title>core::slice::sort::recurse (1 samples, 3.33%)</title><rect x="26.6667%" y="485" width="3.3333%" height="15" fill="rgb(220,109,13)" fg:x="8" fg:w="1"/><text x="26.9167%" y="495.50">cor..</text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 3.33%)</title><rect x="26.6667%" y="469" width="3.3333%" height="15" fill="rgb(232,18,1)" fg:x="8" fg:w="1"/><text x="26.9167%" y="479.50">cor..</text></g><g><title>core::slice::sort::insert_tail (1 samples, 3.33%)</title><rect x="26.6667%" y="453" width="3.3333%" height="15" fill="rgb(215,41,42)" fg:x="8" fg:w="1"/><text x="26.9167%" y="463.50">cor..</text></g><g><title>core::slice::_&lt;impl [T]&gt;::sort_unstable_by::_{{closure}} (1 samples, 3.33%)</title><rect x="26.6667%" y="437" width="3.3333%" height="15" fill="rgb(224,123,36)" fg:x="8" fg:w="1"/><text x="26.9167%" y="447.50">cor..</text></g><g><title>kirk_seidel::median_of_medians::_{{closure}}::_{{closure}} (1 samples, 3.33%)</title><rect x="26.6667%" y="421" width="3.3333%" height="15" fill="rgb(240,125,3)" fg:x="8" fg:w="1"/><text x="26.9167%" y="431.50">kir..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::partial_cmp (1 samples, 3.33%)</title><rect x="26.6667%" y="405" width="3.3333%" height="15" fill="rgb(205,98,50)" fg:x="8" fg:w="1"/><text x="26.9167%" y="415.50">cor..</text></g><g><title>kirk_seidel::bridge (8 samples, 26.67%)</title><rect x="6.6667%" y="773" width="26.6667%" height="15" fill="rgb(205,185,37)" fg:x="2" fg:w="8"/><text x="6.9167%" y="783.50">kirk_seidel::bridge</text></g><g><title>kirk_seidel::bridge (7 samples, 23.33%)</title><rect x="10.0000%" y="757" width="23.3333%" height="15" fill="rgb(238,207,15)" fg:x="3" fg:w="7"/><text x="10.2500%" y="767.50">kirk_seidel::bridge</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="30.0000%" y="741" width="3.3333%" height="15" fill="rgb(213,199,42)" fg:x="9" fg:w="1"/><text x="30.2500%" y="751.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="30.0000%" y="725" width="3.3333%" height="15" fill="rgb(235,201,11)" fg:x="9" fg:w="1"/><text x="30.2500%" y="735.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="30.0000%" y="709" width="3.3333%" height="15" fill="rgb(207,46,11)" fg:x="9" fg:w="1"/><text x="30.2500%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="30.0000%" y="693" width="3.3333%" height="15" fill="rgb(241,35,35)" fg:x="9" fg:w="1"/><text x="30.2500%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="30.0000%" y="677" width="3.3333%" height="15" fill="rgb(243,32,47)" fg:x="9" fg:w="1"/><text x="30.2500%" y="687.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="30.0000%" y="661" width="3.3333%" height="15" fill="rgb(247,202,23)" fg:x="9" fg:w="1"/><text x="30.2500%" y="671.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="30.0000%" y="645" width="3.3333%" height="15" fill="rgb(219,102,11)" fg:x="9" fg:w="1"/><text x="30.2500%" y="655.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="30.0000%" y="629" width="3.3333%" height="15" fill="rgb(243,110,44)" fg:x="9" fg:w="1"/><text x="30.2500%" y="639.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 3.33%)</title><rect x="30.0000%" y="613" width="3.3333%" height="15" fill="rgb(222,74,54)" fg:x="9" fg:w="1"/><text x="30.2500%" y="623.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 3.33%)</title><rect x="30.0000%" y="597" width="3.3333%" height="15" fill="rgb(216,99,12)" fg:x="9" fg:w="1"/><text x="30.2500%" y="607.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 3.33%)</title><rect x="30.0000%" y="581" width="3.3333%" height="15" fill="rgb(226,22,26)" fg:x="9" fg:w="1"/><text x="30.2500%" y="591.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 3.33%)</title><rect x="30.0000%" y="565" width="3.3333%" height="15" fill="rgb(217,163,10)" fg:x="9" fg:w="1"/><text x="30.2500%" y="575.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 3.33%)</title><rect x="30.0000%" y="549" width="3.3333%" height="15" fill="rgb(213,25,53)" fg:x="9" fg:w="1"/><text x="30.2500%" y="559.50">cor..</text></g><g><title>kirk_seidel::bridge (9 samples, 30.00%)</title><rect x="6.6667%" y="789" width="30.0000%" height="15" fill="rgb(252,105,26)" fg:x="2" fg:w="9"/><text x="6.9167%" y="799.50">kirk_seidel::bridge</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="33.3333%" y="773" width="3.3333%" height="15" fill="rgb(220,39,43)" fg:x="10" fg:w="1"/><text x="33.5833%" y="783.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="33.3333%" y="757" width="3.3333%" height="15" fill="rgb(229,68,48)" fg:x="10" fg:w="1"/><text x="33.5833%" y="767.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="33.3333%" y="741" width="3.3333%" height="15" fill="rgb(252,8,32)" fg:x="10" fg:w="1"/><text x="33.5833%" y="751.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="33.3333%" y="725" width="3.3333%" height="15" fill="rgb(223,20,43)" fg:x="10" fg:w="1"/><text x="33.5833%" y="735.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="33.3333%" y="709" width="3.3333%" height="15" fill="rgb(229,81,49)" fg:x="10" fg:w="1"/><text x="33.5833%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="33.3333%" y="693" width="3.3333%" height="15" fill="rgb(236,28,36)" fg:x="10" fg:w="1"/><text x="33.5833%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="33.3333%" y="677" width="3.3333%" height="15" fill="rgb(249,185,26)" fg:x="10" fg:w="1"/><text x="33.5833%" y="687.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="33.3333%" y="661" width="3.3333%" height="15" fill="rgb(249,174,33)" fg:x="10" fg:w="1"/><text x="33.5833%" y="671.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 3.33%)</title><rect x="33.3333%" y="645" width="3.3333%" height="15" fill="rgb(233,201,37)" fg:x="10" fg:w="1"/><text x="33.5833%" y="655.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 3.33%)</title><rect x="33.3333%" y="629" width="3.3333%" height="15" fill="rgb(221,78,26)" fg:x="10" fg:w="1"/><text x="33.5833%" y="639.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (1 samples, 3.33%)</title><rect x="33.3333%" y="613" width="3.3333%" height="15" fill="rgb(250,127,30)" fg:x="10" fg:w="1"/><text x="33.5833%" y="623.50">has..</text></g><g><title>kirk_seidel::median_of_medians (1 samples, 3.33%)</title><rect x="36.6667%" y="789" width="3.3333%" height="15" fill="rgb(230,49,44)" fg:x="11" fg:w="1"/><text x="36.9167%" y="799.50">kir..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 3.33%)</title><rect x="36.6667%" y="773" width="3.3333%" height="15" fill="rgb(229,67,23)" fg:x="11" fg:w="1"/><text x="36.9167%" y="783.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="36.6667%" y="757" width="3.3333%" height="15" fill="rgb(249,83,47)" fg:x="11" fg:w="1"/><text x="36.9167%" y="767.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="36.6667%" y="741" width="3.3333%" height="15" fill="rgb(215,43,3)" fg:x="11" fg:w="1"/><text x="36.9167%" y="751.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="36.6667%" y="725" width="3.3333%" height="15" fill="rgb(238,154,13)" fg:x="11" fg:w="1"/><text x="36.9167%" y="735.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.33%)</title><rect x="36.6667%" y="709" width="3.3333%" height="15" fill="rgb(219,56,2)" fg:x="11" fg:w="1"/><text x="36.9167%" y="719.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 3.33%)</title><rect x="36.6667%" y="693" width="3.3333%" height="15" fill="rgb(233,0,4)" fg:x="11" fg:w="1"/><text x="36.9167%" y="703.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 3.33%)</title><rect x="36.6667%" y="677" width="3.3333%" height="15" fill="rgb(235,30,7)" fg:x="11" fg:w="1"/><text x="36.9167%" y="687.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 3.33%)</title><rect x="36.6667%" y="661" width="3.3333%" height="15" fill="rgb(250,79,13)" fg:x="11" fg:w="1"/><text x="36.9167%" y="671.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 3.33%)</title><rect x="36.6667%" y="645" width="3.3333%" height="15" fill="rgb(211,146,34)" fg:x="11" fg:w="1"/><text x="36.9167%" y="655.50">cor..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 3.33%)</title><rect x="36.6667%" y="629" width="3.3333%" height="15" fill="rgb(228,22,38)" fg:x="11" fg:w="1"/><text x="36.9167%" y="639.50">cor..</text></g><g><title>kirk_seidel::median_of_medians::_{{closure}} (1 samples, 3.33%)</title><rect x="36.6667%" y="613" width="3.3333%" height="15" fill="rgb(235,168,5)" fg:x="11" fg:w="1"/><text x="36.9167%" y="623.50">kir..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by (1 samples, 3.33%)</title><rect x="36.6667%" y="597" width="3.3333%" height="15" fill="rgb(221,155,16)" fg:x="11" fg:w="1"/><text x="36.9167%" y="607.50">cor..</text></g><g><title>core::slice::sort::quicksort (1 samples, 3.33%)</title><rect x="36.6667%" y="581" width="3.3333%" height="15" fill="rgb(215,215,53)" fg:x="11" fg:w="1"/><text x="36.9167%" y="591.50">cor..</text></g><g><title>core::slice::sort::recurse (1 samples, 3.33%)</title><rect x="36.6667%" y="565" width="3.3333%" height="15" fill="rgb(223,4,10)" fg:x="11" fg:w="1"/><text x="36.9167%" y="575.50">cor..</text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 3.33%)</title><rect x="36.6667%" y="549" width="3.3333%" height="15" fill="rgb(234,103,6)" fg:x="11" fg:w="1"/><text x="36.9167%" y="559.50">cor..</text></g><g><title>core::slice::sort::insert_tail (1 samples, 3.33%)</title><rect x="36.6667%" y="533" width="3.3333%" height="15" fill="rgb(227,97,0)" fg:x="11" fg:w="1"/><text x="36.9167%" y="543.50">cor..</text></g><g><title>kirk_seidel::bridge (12 samples, 40.00%)</title><rect x="3.3333%" y="805" width="40.0000%" height="15" fill="rgb(234,150,53)" fg:x="1" fg:w="12"/><text x="3.5833%" y="815.50">kirk_seidel::bridge</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="40.0000%" y="789" width="3.3333%" height="15" fill="rgb(228,201,54)" fg:x="12" fg:w="1"/><text x="40.2500%" y="799.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="40.0000%" y="773" width="3.3333%" height="15" fill="rgb(222,22,37)" fg:x="12" fg:w="1"/><text x="40.2500%" y="783.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="40.0000%" y="757" width="3.3333%" height="15" fill="rgb(237,53,32)" fg:x="12" fg:w="1"/><text x="40.2500%" y="767.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="40.0000%" y="741" width="3.3333%" height="15" fill="rgb(233,25,53)" fg:x="12" fg:w="1"/><text x="40.2500%" y="751.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="40.0000%" y="725" width="3.3333%" height="15" fill="rgb(210,40,34)" fg:x="12" fg:w="1"/><text x="40.2500%" y="735.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="40.0000%" y="709" width="3.3333%" height="15" fill="rgb(241,220,44)" fg:x="12" fg:w="1"/><text x="40.2500%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="40.0000%" y="693" width="3.3333%" height="15" fill="rgb(235,28,35)" fg:x="12" fg:w="1"/><text x="40.2500%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="40.0000%" y="677" width="3.3333%" height="15" fill="rgb(210,56,17)" fg:x="12" fg:w="1"/><text x="40.2500%" y="687.50">has..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 3.33%)</title><rect x="40.0000%" y="661" width="3.3333%" height="15" fill="rgb(224,130,29)" fg:x="12" fg:w="1"/><text x="40.2500%" y="671.50">cor..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="43.3333%" y="709" width="3.3333%" height="15" fill="rgb(235,212,8)" fg:x="13" fg:w="1"/><text x="43.5833%" y="719.50">kir..</text></g><g><title>kirk_seidel::bridge (2 samples, 6.67%)</title><rect x="43.3333%" y="725" width="6.6667%" height="15" fill="rgb(223,33,50)" fg:x="13" fg:w="2"/><text x="43.5833%" y="735.50">kirk_seid..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="46.6667%" y="709" width="3.3333%" height="15" fill="rgb(219,149,13)" fg:x="14" fg:w="1"/><text x="46.9167%" y="719.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="46.6667%" y="693" width="3.3333%" height="15" fill="rgb(250,156,29)" fg:x="14" fg:w="1"/><text x="46.9167%" y="703.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="46.6667%" y="677" width="3.3333%" height="15" fill="rgb(216,193,19)" fg:x="14" fg:w="1"/><text x="46.9167%" y="687.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="46.6667%" y="661" width="3.3333%" height="15" fill="rgb(216,135,14)" fg:x="14" fg:w="1"/><text x="46.9167%" y="671.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="46.6667%" y="645" width="3.3333%" height="15" fill="rgb(241,47,5)" fg:x="14" fg:w="1"/><text x="46.9167%" y="655.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="46.6667%" y="629" width="3.3333%" height="15" fill="rgb(233,42,35)" fg:x="14" fg:w="1"/><text x="46.9167%" y="639.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="46.6667%" y="613" width="3.3333%" height="15" fill="rgb(231,13,6)" fg:x="14" fg:w="1"/><text x="46.9167%" y="623.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="46.6667%" y="597" width="3.3333%" height="15" fill="rgb(207,181,40)" fg:x="14" fg:w="1"/><text x="46.9167%" y="607.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (1 samples, 3.33%)</title><rect x="46.6667%" y="581" width="3.3333%" height="15" fill="rgb(254,173,49)" fg:x="14" fg:w="1"/><text x="46.9167%" y="591.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 3.33%)</title><rect x="46.6667%" y="565" width="3.3333%" height="15" fill="rgb(221,1,38)" fg:x="14" fg:w="1"/><text x="46.9167%" y="575.50">has..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 3.33%)</title><rect x="46.6667%" y="549" width="3.3333%" height="15" fill="rgb(206,124,46)" fg:x="14" fg:w="1"/><text x="46.9167%" y="559.50">cor..</text></g><g><title>core::intrinsics::write_bytes (1 samples, 3.33%)</title><rect x="46.6667%" y="533" width="3.3333%" height="15" fill="rgb(249,21,11)" fg:x="14" fg:w="1"/><text x="46.9167%" y="543.50">cor..</text></g><g><title>__memset_evex_unaligned_erms (1 samples, 3.33%)</title><rect x="46.6667%" y="517" width="3.3333%" height="15" fill="rgb(222,201,40)" fg:x="14" fg:w="1"/><text x="46.9167%" y="527.50">__m..</text></g><g><title>kirk_seidel::bridge (3 samples, 10.00%)</title><rect x="43.3333%" y="757" width="10.0000%" height="15" fill="rgb(235,61,29)" fg:x="13" fg:w="3"/><text x="43.5833%" y="767.50">kirk_seidel::b..</text></g><g><title>kirk_seidel::bridge (3 samples, 10.00%)</title><rect x="43.3333%" y="741" width="10.0000%" height="15" fill="rgb(219,207,3)" fg:x="13" fg:w="3"/><text x="43.5833%" y="751.50">kirk_seidel::b..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="50.0000%" y="725" width="3.3333%" height="15" fill="rgb(222,56,46)" fg:x="15" fg:w="1"/><text x="50.2500%" y="735.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="50.0000%" y="709" width="3.3333%" height="15" fill="rgb(239,76,54)" fg:x="15" fg:w="1"/><text x="50.2500%" y="719.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="50.0000%" y="693" width="3.3333%" height="15" fill="rgb(231,124,27)" fg:x="15" fg:w="1"/><text x="50.2500%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 3.33%)</title><rect x="50.0000%" y="677" width="3.3333%" height="15" fill="rgb(249,195,6)" fg:x="15" fg:w="1"/><text x="50.2500%" y="687.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 3.33%)</title><rect x="50.0000%" y="661" width="3.3333%" height="15" fill="rgb(237,174,47)" fg:x="15" fg:w="1"/><text x="50.2500%" y="671.50">has..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 3.33%)</title><rect x="50.0000%" y="645" width="3.3333%" height="15" fill="rgb(206,201,31)" fg:x="15" fg:w="1"/><text x="50.2500%" y="655.50">has..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 3.33%)</title><rect x="50.0000%" y="629" width="3.3333%" height="15" fill="rgb(231,57,52)" fg:x="15" fg:w="1"/><text x="50.2500%" y="639.50">cor..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 3.33%)</title><rect x="50.0000%" y="613" width="3.3333%" height="15" fill="rgb(248,177,22)" fg:x="15" fg:w="1"/><text x="50.2500%" y="623.50">cor..</text></g><g><title>kirk_seidel::bridge (4 samples, 13.33%)</title><rect x="43.3333%" y="773" width="13.3333%" height="15" fill="rgb(215,211,37)" fg:x="13" fg:w="4"/><text x="43.5833%" y="783.50">kirk_seidel::bridge</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="53.3333%" y="757" width="3.3333%" height="15" fill="rgb(241,128,51)" fg:x="16" fg:w="1"/><text x="53.5833%" y="767.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="53.3333%" y="741" width="3.3333%" height="15" fill="rgb(227,165,31)" fg:x="16" fg:w="1"/><text x="53.5833%" y="751.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="53.3333%" y="725" width="3.3333%" height="15" fill="rgb(228,167,24)" fg:x="16" fg:w="1"/><text x="53.5833%" y="735.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="53.3333%" y="709" width="3.3333%" height="15" fill="rgb(228,143,12)" fg:x="16" fg:w="1"/><text x="53.5833%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="53.3333%" y="693" width="3.3333%" height="15" fill="rgb(249,149,8)" fg:x="16" fg:w="1"/><text x="53.5833%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="53.3333%" y="677" width="3.3333%" height="15" fill="rgb(243,35,44)" fg:x="16" fg:w="1"/><text x="53.5833%" y="687.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="53.3333%" y="661" width="3.3333%" height="15" fill="rgb(246,89,9)" fg:x="16" fg:w="1"/><text x="53.5833%" y="671.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="53.3333%" y="645" width="3.3333%" height="15" fill="rgb(233,213,13)" fg:x="16" fg:w="1"/><text x="53.5833%" y="655.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 3.33%)</title><rect x="53.3333%" y="629" width="3.3333%" height="15" fill="rgb(233,141,41)" fg:x="16" fg:w="1"/><text x="53.5833%" y="639.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 3.33%)</title><rect x="53.3333%" y="613" width="3.3333%" height="15" fill="rgb(239,167,4)" fg:x="16" fg:w="1"/><text x="53.5833%" y="623.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 3.33%)</title><rect x="53.3333%" y="597" width="3.3333%" height="15" fill="rgb(209,217,16)" fg:x="16" fg:w="1"/><text x="53.5833%" y="607.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 3.33%)</title><rect x="53.3333%" y="581" width="3.3333%" height="15" fill="rgb(219,88,35)" fg:x="16" fg:w="1"/><text x="53.5833%" y="591.50">has..</text></g><g><title>hashbrown::raw::is_full (1 samples, 3.33%)</title><rect x="53.3333%" y="565" width="3.3333%" height="15" fill="rgb(220,193,23)" fg:x="16" fg:w="1"/><text x="53.5833%" y="575.50">has..</text></g><g><title>kirk_seidel::bridge (5 samples, 16.67%)</title><rect x="43.3333%" y="789" width="16.6667%" height="15" fill="rgb(230,90,52)" fg:x="13" fg:w="5"/><text x="43.5833%" y="799.50">kirk_seidel::bridge</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="56.6667%" y="773" width="3.3333%" height="15" fill="rgb(252,106,19)" fg:x="17" fg:w="1"/><text x="56.9167%" y="783.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="56.6667%" y="757" width="3.3333%" height="15" fill="rgb(206,74,20)" fg:x="17" fg:w="1"/><text x="56.9167%" y="767.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="56.6667%" y="741" width="3.3333%" height="15" fill="rgb(230,138,44)" fg:x="17" fg:w="1"/><text x="56.9167%" y="751.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="56.6667%" y="725" width="3.3333%" height="15" fill="rgb(235,182,43)" fg:x="17" fg:w="1"/><text x="56.9167%" y="735.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="56.6667%" y="709" width="3.3333%" height="15" fill="rgb(242,16,51)" fg:x="17" fg:w="1"/><text x="56.9167%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="56.6667%" y="693" width="3.3333%" height="15" fill="rgb(248,9,4)" fg:x="17" fg:w="1"/><text x="56.9167%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="56.6667%" y="677" width="3.3333%" height="15" fill="rgb(210,31,22)" fg:x="17" fg:w="1"/><text x="56.9167%" y="687.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="56.6667%" y="661" width="3.3333%" height="15" fill="rgb(239,54,39)" fg:x="17" fg:w="1"/><text x="56.9167%" y="671.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 3.33%)</title><rect x="56.6667%" y="645" width="3.3333%" height="15" fill="rgb(230,99,41)" fg:x="17" fg:w="1"/><text x="56.9167%" y="655.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 3.33%)</title><rect x="56.6667%" y="629" width="3.3333%" height="15" fill="rgb(253,106,12)" fg:x="17" fg:w="1"/><text x="56.9167%" y="639.50">has..</text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 3.33%)</title><rect x="56.6667%" y="613" width="3.3333%" height="15" fill="rgb(213,46,41)" fg:x="17" fg:w="1"/><text x="56.9167%" y="623.50">has..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 3.33%)</title><rect x="56.6667%" y="597" width="3.3333%" height="15" fill="rgb(215,133,35)" fg:x="17" fg:w="1"/><text x="56.9167%" y="607.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 3.33%)</title><rect x="56.6667%" y="581" width="3.3333%" height="15" fill="rgb(213,28,5)" fg:x="17" fg:w="1"/><text x="56.9167%" y="591.50">cor..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="60.0000%" y="741" width="3.3333%" height="15" fill="rgb(215,77,49)" fg:x="18" fg:w="1"/><text x="60.2500%" y="751.50">kir..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="60.0000%" y="725" width="3.3333%" height="15" fill="rgb(248,100,22)" fg:x="18" fg:w="1"/><text x="60.2500%" y="735.50">kir..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="60.0000%" y="709" width="3.3333%" height="15" fill="rgb(208,67,9)" fg:x="18" fg:w="1"/><text x="60.2500%" y="719.50">kir..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="60.0000%" y="693" width="3.3333%" height="15" fill="rgb(219,133,21)" fg:x="18" fg:w="1"/><text x="60.2500%" y="703.50">kir..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="60.0000%" y="677" width="3.3333%" height="15" fill="rgb(246,46,29)" fg:x="18" fg:w="1"/><text x="60.2500%" y="687.50">kir..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="60.0000%" y="661" width="3.3333%" height="15" fill="rgb(246,185,52)" fg:x="18" fg:w="1"/><text x="60.2500%" y="671.50">kir..</text></g><g><title>kirk_seidel::bridge (1 samples, 3.33%)</title><rect x="60.0000%" y="645" width="3.3333%" height="15" fill="rgb(252,136,11)" fg:x="18" fg:w="1"/><text x="60.2500%" y="655.50">kir..</text></g><g><title>kirk_seidel::connect (2 samples, 6.67%)</title><rect x="60.0000%" y="789" width="6.6667%" height="15" fill="rgb(219,138,53)" fg:x="18" fg:w="2"/><text x="60.2500%" y="799.50">kirk_seid..</text></g><g><title>kirk_seidel::bridge (2 samples, 6.67%)</title><rect x="60.0000%" y="773" width="6.6667%" height="15" fill="rgb(211,51,23)" fg:x="18" fg:w="2"/><text x="60.2500%" y="783.50">kirk_seid..</text></g><g><title>kirk_seidel::bridge (2 samples, 6.67%)</title><rect x="60.0000%" y="757" width="6.6667%" height="15" fill="rgb(247,221,28)" fg:x="18" fg:w="2"/><text x="60.2500%" y="767.50">kirk_seid..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::insert (1 samples, 3.33%)</title><rect x="63.3333%" y="741" width="3.3333%" height="15" fill="rgb(251,222,45)" fg:x="19" fg:w="1"/><text x="63.5833%" y="751.50">std..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="63.3333%" y="725" width="3.3333%" height="15" fill="rgb(217,162,53)" fg:x="19" fg:w="1"/><text x="63.5833%" y="735.50">has..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 3.33%)</title><rect x="63.3333%" y="709" width="3.3333%" height="15" fill="rgb(229,93,14)" fg:x="19" fg:w="1"/><text x="63.5833%" y="719.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (1 samples, 3.33%)</title><rect x="63.3333%" y="693" width="3.3333%" height="15" fill="rgb(209,67,49)" fg:x="19" fg:w="1"/><text x="63.5833%" y="703.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 3.33%)</title><rect x="63.3333%" y="677" width="3.3333%" height="15" fill="rgb(213,87,29)" fg:x="19" fg:w="1"/><text x="63.5833%" y="687.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 3.33%)</title><rect x="63.3333%" y="661" width="3.3333%" height="15" fill="rgb(205,151,52)" fg:x="19" fg:w="1"/><text x="63.5833%" y="671.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 3.33%)</title><rect x="63.3333%" y="645" width="3.3333%" height="15" fill="rgb(253,215,39)" fg:x="19" fg:w="1"/><text x="63.5833%" y="655.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 3.33%)</title><rect x="63.3333%" y="629" width="3.3333%" height="15" fill="rgb(221,220,41)" fg:x="19" fg:w="1"/><text x="63.5833%" y="639.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 3.33%)</title><rect x="63.3333%" y="613" width="3.3333%" height="15" fill="rgb(218,133,21)" fg:x="19" fg:w="1"/><text x="63.5833%" y="623.50">has..</text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (1 samples, 3.33%)</title><rect x="63.3333%" y="597" width="3.3333%" height="15" fill="rgb(221,193,43)" fg:x="19" fg:w="1"/><text x="63.5833%" y="607.50">has..</text></g><g><title>hashbrown::raw::h2 (1 samples, 3.33%)</title><rect x="63.3333%" y="581" width="3.3333%" height="15" fill="rgb(240,128,52)" fg:x="19" fg:w="1"/><text x="63.5833%" y="591.50">has..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 3.33%)</title><rect x="66.6667%" y="773" width="3.3333%" height="15" fill="rgb(253,114,12)" fg:x="20" fg:w="1"/><text x="66.9167%" y="783.50">all..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 3.33%)</title><rect x="66.6667%" y="757" width="3.3333%" height="15" fill="rgb(215,223,47)" fg:x="20" fg:w="1"/><text x="66.9167%" y="767.50">all..</text></g><g><title>alloc::slice::hack::to_vec (1 samples, 3.33%)</title><rect x="66.6667%" y="741" width="3.3333%" height="15" fill="rgb(248,225,23)" fg:x="20" fg:w="1"/><text x="66.9167%" y="751.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 3.33%)</title><rect x="66.6667%" y="725" width="3.3333%" height="15" fill="rgb(250,108,0)" fg:x="20" fg:w="1"/><text x="66.9167%" y="735.50">&lt;T ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 3.33%)</title><rect x="66.6667%" y="709" width="3.3333%" height="15" fill="rgb(228,208,7)" fg:x="20" fg:w="1"/><text x="66.9167%" y="719.50">cor..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 3.33%)</title><rect x="66.6667%" y="693" width="3.3333%" height="15" fill="rgb(244,45,10)" fg:x="20" fg:w="1"/><text x="66.9167%" y="703.50">cor..</text></g><g><title>__memcpy_evex_unaligned_erms (1 samples, 3.33%)</title><rect x="66.6667%" y="677" width="3.3333%" height="15" fill="rgb(207,125,25)" fg:x="20" fg:w="1"/><text x="66.9167%" y="687.50">__m..</text></g><g><title>_start (22 samples, 73.33%)</title><rect x="0.0000%" y="997" width="73.3333%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="22"/><text x="0.2500%" y="1007.50">_start</text></g><g><title>__libc_start_main_impl (22 samples, 73.33%)</title><rect x="0.0000%" y="981" width="73.3333%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="22"/><text x="0.2500%" y="991.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (22 samples, 73.33%)</title><rect x="0.0000%" y="965" width="73.3333%" height="15" fill="rgb(221,65,9)" fg:x="0" fg:w="22"/><text x="0.2500%" y="975.50">__libc_start_call_main</text></g><g><title>main (22 samples, 73.33%)</title><rect x="0.0000%" y="949" width="73.3333%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="22"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (22 samples, 73.33%)</title><rect x="0.0000%" y="933" width="73.3333%" height="15" fill="rgb(225,32,20)" fg:x="0" fg:w="22"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (22 samples, 73.33%)</title><rect x="0.0000%" y="917" width="73.3333%" height="15" fill="rgb(215,141,46)" fg:x="0" fg:w="22"/><text x="0.2500%" y="927.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 73.33%)</title><rect x="0.0000%" y="901" width="73.3333%" height="15" fill="rgb(250,160,47)" fg:x="0" fg:w="22"/><text x="0.2500%" y="911.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 73.33%)</title><rect x="0.0000%" y="885" width="73.3333%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="22"/><text x="0.2500%" y="895.50">core::ops::function::FnOnce::call_once</text></g><g><title>kirk_seidel::main (22 samples, 73.33%)</title><rect x="0.0000%" y="869" width="73.3333%" height="15" fill="rgb(234,217,39)" fg:x="0" fg:w="22"/><text x="0.2500%" y="879.50">kirk_seidel::main</text></g><g><title>kirk_seidel::kirk_patrick_seidel (21 samples, 70.00%)</title><rect x="3.3333%" y="853" width="70.0000%" height="15" fill="rgb(207,178,40)" fg:x="1" fg:w="21"/><text x="3.5833%" y="863.50">kirk_seidel::kirk_patrick_seidel</text></g><g><title>kirk_seidel::upper_hull (21 samples, 70.00%)</title><rect x="3.3333%" y="837" width="70.0000%" height="15" fill="rgb(221,136,13)" fg:x="1" fg:w="21"/><text x="3.5833%" y="847.50">kirk_seidel::upper_hull</text></g><g><title>kirk_seidel::connect (21 samples, 70.00%)</title><rect x="3.3333%" y="821" width="70.0000%" height="15" fill="rgb(249,199,10)" fg:x="1" fg:w="21"/><text x="3.5833%" y="831.50">kirk_seidel::connect</text></g><g><title>kirk_seidel::connect (9 samples, 30.00%)</title><rect x="43.3333%" y="805" width="30.0000%" height="15" fill="rgb(249,222,13)" fg:x="13" fg:w="9"/><text x="43.5833%" y="815.50">kirk_seidel::connect</text></g><g><title>kirk_seidel::median_of_medians (2 samples, 6.67%)</title><rect x="66.6667%" y="789" width="6.6667%" height="15" fill="rgb(244,185,38)" fg:x="20" fg:w="2"/><text x="66.9167%" y="799.50">kirk_seid..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 3.33%)</title><rect x="70.0000%" y="773" width="3.3333%" height="15" fill="rgb(236,202,9)" fg:x="21" fg:w="1"/><text x="70.2500%" y="783.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="70.0000%" y="757" width="3.3333%" height="15" fill="rgb(250,229,37)" fg:x="21" fg:w="1"/><text x="70.2500%" y="767.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="70.0000%" y="741" width="3.3333%" height="15" fill="rgb(206,174,23)" fg:x="21" fg:w="1"/><text x="70.2500%" y="751.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 3.33%)</title><rect x="70.0000%" y="725" width="3.3333%" height="15" fill="rgb(211,33,43)" fg:x="21" fg:w="1"/><text x="70.2500%" y="735.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 3.33%)</title><rect x="70.0000%" y="709" width="3.3333%" height="15" fill="rgb(245,58,50)" fg:x="21" fg:w="1"/><text x="70.2500%" y="719.50">&lt;al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 3.33%)</title><rect x="70.0000%" y="693" width="3.3333%" height="15" fill="rgb(244,68,36)" fg:x="21" fg:w="1"/><text x="70.2500%" y="703.50">all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 3.33%)</title><rect x="70.0000%" y="677" width="3.3333%" height="15" fill="rgb(232,229,15)" fg:x="21" fg:w="1"/><text x="70.2500%" y="687.50">cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 3.33%)</title><rect x="70.0000%" y="661" width="3.3333%" height="15" fill="rgb(254,30,23)" fg:x="21" fg:w="1"/><text x="70.2500%" y="671.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 3.33%)</title><rect x="70.0000%" y="645" width="3.3333%" height="15" fill="rgb(235,160,14)" fg:x="21" fg:w="1"/><text x="70.2500%" y="655.50">cor..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1 samples, 3.33%)</title><rect x="70.0000%" y="629" width="3.3333%" height="15" fill="rgb(212,155,44)" fg:x="21" fg:w="1"/><text x="70.2500%" y="639.50">cor..</text></g><g><title>kirk_seidel::median_of_medians::_{{closure}} (1 samples, 3.33%)</title><rect x="70.0000%" y="613" width="3.3333%" height="15" fill="rgb(226,2,50)" fg:x="21" fg:w="1"/><text x="70.2500%" y="623.50">kir..</text></g><g><title>core::slice::&lt;impl [T]&gt;::sort_unstable_by (1 samples, 3.33%)</title><rect x="70.0000%" y="597" width="3.3333%" height="15" fill="rgb(234,177,6)" fg:x="21" fg:w="1"/><text x="70.2500%" y="607.50">cor..</text></g><g><title>core::slice::sort::quicksort (1 samples, 3.33%)</title><rect x="70.0000%" y="581" width="3.3333%" height="15" fill="rgb(217,24,9)" fg:x="21" fg:w="1"/><text x="70.2500%" y="591.50">cor..</text></g><g><title>core::slice::sort::recurse (1 samples, 3.33%)</title><rect x="70.0000%" y="565" width="3.3333%" height="15" fill="rgb(220,13,46)" fg:x="21" fg:w="1"/><text x="70.2500%" y="575.50">cor..</text></g><g><title>asm_exc_page_fault (1 samples, 3.33%)</title><rect x="73.3333%" y="997" width="3.3333%" height="15" fill="rgb(239,221,27)" fg:x="22" fg:w="1"/><text x="73.5833%" y="1007.50">asm..</text></g><g><title>__x64_sys_execve (1 samples, 3.33%)</title><rect x="76.6667%" y="965" width="3.3333%" height="15" fill="rgb(222,198,25)" fg:x="23" fg:w="1"/><text x="76.9167%" y="975.50">__x..</text></g><g><title>do_execveat_common.isra.0 (1 samples, 3.33%)</title><rect x="76.6667%" y="949" width="3.3333%" height="15" fill="rgb(211,99,13)" fg:x="23" fg:w="1"/><text x="76.9167%" y="959.50">do_..</text></g><g><title>bprm_execve (1 samples, 3.33%)</title><rect x="76.6667%" y="933" width="3.3333%" height="15" fill="rgb(232,111,31)" fg:x="23" fg:w="1"/><text x="76.9167%" y="943.50">bpr..</text></g><g><title>bprm_execve.part.0 (1 samples, 3.33%)</title><rect x="76.6667%" y="917" width="3.3333%" height="15" fill="rgb(245,82,37)" fg:x="23" fg:w="1"/><text x="76.9167%" y="927.50">bpr..</text></g><g><title>exec_binprm (1 samples, 3.33%)</title><rect x="76.6667%" y="901" width="3.3333%" height="15" fill="rgb(227,149,46)" fg:x="23" fg:w="1"/><text x="76.9167%" y="911.50">exe..</text></g><g><title>search_binary_handler (1 samples, 3.33%)</title><rect x="76.6667%" y="885" width="3.3333%" height="15" fill="rgb(218,36,50)" fg:x="23" fg:w="1"/><text x="76.9167%" y="895.50">sea..</text></g><g><title>load_elf_binary (1 samples, 3.33%)</title><rect x="76.6667%" y="869" width="3.3333%" height="15" fill="rgb(226,80,48)" fg:x="23" fg:w="1"/><text x="76.9167%" y="879.50">loa..</text></g><g><title>setup_arg_pages (1 samples, 3.33%)</title><rect x="76.6667%" y="853" width="3.3333%" height="15" fill="rgb(238,224,15)" fg:x="23" fg:w="1"/><text x="76.9167%" y="863.50">set..</text></g><g><title>shift_arg_pages (1 samples, 3.33%)</title><rect x="76.6667%" y="837" width="3.3333%" height="15" fill="rgb(241,136,10)" fg:x="23" fg:w="1"/><text x="76.9167%" y="847.50">shi..</text></g><g><title>move_page_tables (1 samples, 3.33%)</title><rect x="76.6667%" y="821" width="3.3333%" height="15" fill="rgb(208,32,45)" fg:x="23" fg:w="1"/><text x="76.9167%" y="831.50">mov..</text></g><g><title>move_ptes.constprop.0 (1 samples, 3.33%)</title><rect x="76.6667%" y="805" width="3.3333%" height="15" fill="rgb(207,135,9)" fg:x="23" fg:w="1"/><text x="76.9167%" y="815.50">mov..</text></g><g><title>__pte_offset_map_lock (1 samples, 3.33%)</title><rect x="76.6667%" y="789" width="3.3333%" height="15" fill="rgb(206,86,44)" fg:x="23" fg:w="1"/><text x="76.9167%" y="799.50">__p..</text></g><g><title>kirk_seidel (25 samples, 83.33%)</title><rect x="0.0000%" y="1013" width="83.3333%" height="15" fill="rgb(245,177,15)" fg:x="0" fg:w="25"/><text x="0.2500%" y="1023.50">kirk_seidel</text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 6.67%)</title><rect x="76.6667%" y="997" width="6.6667%" height="15" fill="rgb(206,64,50)" fg:x="23" fg:w="2"/><text x="76.9167%" y="1007.50">entry_SYS..</text></g><g><title>do_syscall_64 (2 samples, 6.67%)</title><rect x="76.6667%" y="981" width="6.6667%" height="15" fill="rgb(234,36,40)" fg:x="23" fg:w="2"/><text x="76.9167%" y="991.50">do_syscal..</text></g><g><title>__x64_sys_exit_group (1 samples, 3.33%)</title><rect x="80.0000%" y="965" width="3.3333%" height="15" fill="rgb(213,64,8)" fg:x="24" fg:w="1"/><text x="80.2500%" y="975.50">__x..</text></g><g><title>do_group_exit (1 samples, 3.33%)</title><rect x="80.0000%" y="949" width="3.3333%" height="15" fill="rgb(210,75,36)" fg:x="24" fg:w="1"/><text x="80.2500%" y="959.50">do_..</text></g><g><title>do_exit (1 samples, 3.33%)</title><rect x="80.0000%" y="933" width="3.3333%" height="15" fill="rgb(229,88,21)" fg:x="24" fg:w="1"/><text x="80.2500%" y="943.50">do_..</text></g><g><title>exit_mm (1 samples, 3.33%)</title><rect x="80.0000%" y="917" width="3.3333%" height="15" fill="rgb(252,204,47)" fg:x="24" fg:w="1"/><text x="80.2500%" y="927.50">exi..</text></g><g><title>mmput (1 samples, 3.33%)</title><rect x="80.0000%" y="901" width="3.3333%" height="15" fill="rgb(208,77,27)" fg:x="24" fg:w="1"/><text x="80.2500%" y="911.50">mmp..</text></g><g><title>__mmput (1 samples, 3.33%)</title><rect x="80.0000%" y="885" width="3.3333%" height="15" fill="rgb(221,76,26)" fg:x="24" fg:w="1"/><text x="80.2500%" y="895.50">__m..</text></g><g><title>exit_mmap (1 samples, 3.33%)</title><rect x="80.0000%" y="869" width="3.3333%" height="15" fill="rgb(225,139,18)" fg:x="24" fg:w="1"/><text x="80.2500%" y="879.50">exi..</text></g><g><title>unmap_vmas (1 samples, 3.33%)</title><rect x="80.0000%" y="853" width="3.3333%" height="15" fill="rgb(230,137,11)" fg:x="24" fg:w="1"/><text x="80.2500%" y="863.50">unm..</text></g><g><title>unmap_single_vma (1 samples, 3.33%)</title><rect x="80.0000%" y="837" width="3.3333%" height="15" fill="rgb(212,28,1)" fg:x="24" fg:w="1"/><text x="80.2500%" y="847.50">unm..</text></g><g><title>unmap_page_range (1 samples, 3.33%)</title><rect x="80.0000%" y="821" width="3.3333%" height="15" fill="rgb(248,164,17)" fg:x="24" fg:w="1"/><text x="80.2500%" y="831.50">unm..</text></g><g><title>zap_pmd_range.isra.0 (1 samples, 3.33%)</title><rect x="80.0000%" y="805" width="3.3333%" height="15" fill="rgb(222,171,42)" fg:x="24" fg:w="1"/><text x="80.2500%" y="815.50">zap..</text></g><g><title>zap_pte_range (1 samples, 3.33%)</title><rect x="80.0000%" y="789" width="3.3333%" height="15" fill="rgb(243,84,45)" fg:x="24" fg:w="1"/><text x="80.2500%" y="799.50">zap..</text></g><g><title>all (30 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="30"/><text x="0.2500%" y="1039.50"></text></g><g><title>perf-exec (5 samples, 16.67%)</title><rect x="83.3333%" y="1013" width="16.6667%" height="15" fill="rgb(215,19,7)" fg:x="25" fg:w="5"/><text x="83.5833%" y="1023.50">perf-exec</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 16.67%)</title><rect x="83.3333%" y="997" width="16.6667%" height="15" fill="rgb(238,81,41)" fg:x="25" fg:w="5"/><text x="83.5833%" y="1007.50">entry_SYSCALL_64_after_hwf..</text></g><g><title>do_syscall_64 (5 samples, 16.67%)</title><rect x="83.3333%" y="981" width="16.6667%" height="15" fill="rgb(210,199,37)" fg:x="25" fg:w="5"/><text x="83.5833%" y="991.50">do_syscall_64</text></g><g><title>__x64_sys_execve (5 samples, 16.67%)</title><rect x="83.3333%" y="965" width="16.6667%" height="15" fill="rgb(244,192,49)" fg:x="25" fg:w="5"/><text x="83.5833%" y="975.50">__x64_sys_execve</text></g><g><title>do_execveat_common.isra.0 (5 samples, 16.67%)</title><rect x="83.3333%" y="949" width="16.6667%" height="15" fill="rgb(226,211,11)" fg:x="25" fg:w="5"/><text x="83.5833%" y="959.50">do_execveat_common.isra.0</text></g><g><title>bprm_execve (5 samples, 16.67%)</title><rect x="83.3333%" y="933" width="16.6667%" height="15" fill="rgb(236,162,54)" fg:x="25" fg:w="5"/><text x="83.5833%" y="943.50">bprm_execve</text></g><g><title>bprm_execve.part.0 (5 samples, 16.67%)</title><rect x="83.3333%" y="917" width="16.6667%" height="15" fill="rgb(220,229,9)" fg:x="25" fg:w="5"/><text x="83.5833%" y="927.50">bprm_execve.part.0</text></g><g><title>exec_binprm (5 samples, 16.67%)</title><rect x="83.3333%" y="901" width="16.6667%" height="15" fill="rgb(250,87,22)" fg:x="25" fg:w="5"/><text x="83.5833%" y="911.50">exec_binprm</text></g><g><title>search_binary_handler (5 samples, 16.67%)</title><rect x="83.3333%" y="885" width="16.6667%" height="15" fill="rgb(239,43,17)" fg:x="25" fg:w="5"/><text x="83.5833%" y="895.50">search_binary_handler</text></g><g><title>load_elf_binary (5 samples, 16.67%)</title><rect x="83.3333%" y="869" width="16.6667%" height="15" fill="rgb(231,177,25)" fg:x="25" fg:w="5"/><text x="83.5833%" y="879.50">load_elf_binary</text></g><g><title>begin_new_exec (5 samples, 16.67%)</title><rect x="83.3333%" y="853" width="16.6667%" height="15" fill="rgb(219,179,1)" fg:x="25" fg:w="5"/><text x="83.5833%" y="863.50">begin_new_exec</text></g><g><title>perf_event_exec (5 samples, 16.67%)</title><rect x="83.3333%" y="837" width="16.6667%" height="15" fill="rgb(238,219,53)" fg:x="25" fg:w="5"/><text x="83.5833%" y="847.50">perf_event_exec</text></g><g><title>perf_event_enable_on_exec (5 samples, 16.67%)</title><rect x="83.3333%" y="821" width="16.6667%" height="15" fill="rgb(232,167,36)" fg:x="25" fg:w="5"/><text x="83.5833%" y="831.50">perf_event_enable_on_exec</text></g><g><title>ctx_resched (5 samples, 16.67%)</title><rect x="83.3333%" y="805" width="16.6667%" height="15" fill="rgb(244,19,51)" fg:x="25" fg:w="5"/><text x="83.5833%" y="815.50">ctx_resched</text></g><g><title>perf_ctx_enable (5 samples, 16.67%)</title><rect x="83.3333%" y="789" width="16.6667%" height="15" fill="rgb(224,6,22)" fg:x="25" fg:w="5"/><text x="83.5833%" y="799.50">perf_ctx_enable</text></g><g><title>x86_pmu_enable (5 samples, 16.67%)</title><rect x="83.3333%" y="773" width="16.6667%" height="15" fill="rgb(224,145,5)" fg:x="25" fg:w="5"/><text x="83.5833%" y="783.50">x86_pmu_enable</text></g><g><title>intel_pmu_enable_all (5 samples, 16.67%)</title><rect x="83.3333%" y="757" width="16.6667%" height="15" fill="rgb(234,130,49)" fg:x="25" fg:w="5"/><text x="83.5833%" y="767.50">intel_pmu_enable_all</text></g><g><title>native_write_msr (5 samples, 16.67%)</title><rect x="83.3333%" y="741" width="16.6667%" height="15" fill="rgb(254,6,2)" fg:x="25" fg:w="5"/><text x="83.5833%" y="751.50">native_write_msr</text></g></svg></svg>